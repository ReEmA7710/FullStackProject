---
- name: Deploy full-stack on Kubernetes
  hosts: k8s_server
  become: true

  vars:
    build_number: "{{ lookup('env','BUILD_NUMBER') | default('dev', true) }}"
    backend_image: "docker.io/reemaalsubaie24/backend:{{ build_number }}"
    frontend_image: "docker.io/reemaalsubaie24/frontend:{{ build_number }}"
    kubeconfig_path: "/home/ubuntu/.kube/config"
    repo_root: "{{ playbook_dir | dirname }}"  # جذر المشروع (اللي فيه k8s)

  tasks:
    # ===== نسخ الملفات =====
    - name: Copy namespace manifest
      copy:
        src: "{{ repo_root }}/k8s/namespace.yaml"
        dest: /home/ubuntu/namespace.yaml

    - name: Copy pvc manifest
      copy:
        src: "{{ repo_root }}/k8s/mysql-pvc.yaml"
        dest: /home/ubuntu/mysql-pvc.yaml

    - name: Copy mysql manifest
      copy:
        src: "{{ repo_root }}/k8s/mysql-deployment.yaml"
        dest: /home/ubuntu/mysql-deployment.yaml

    - name: Render backend manifest with injected image
      template:
        src: "{{ repo_root }}/k8s/Backend-Deployment.yaml"
        dest: /home/ubuntu/Backend-Deployment.yaml

    - name: Render frontend manifest with injected image
      template:
        src: "{{ repo_root }}/k8s/Frontend-Deployment.yaml"
        dest: /home/ubuntu/Frontend-Deployment.yaml

    - name: Show rendered images
      debug:
        msg:
          - "backend => {{ backend_image }}"
          - "frontend => {{ frontend_image }}"

    # ===== Apply manifests =====
    - name: Apply namespace
      command: kubectl apply -f /home/ubuntu/namespace.yaml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Apply pvc
      command: kubectl apply -f /home/ubuntu/mysql-pvc.yaml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Apply mysql
      command: kubectl apply -f /home/ubuntu/mysql-deployment.yaml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    # ===== Backend =====
    - name: Check if deployment exists (backend)
      command: kubectl get deployment backend -n fullstack
      register: be_check
      failed_when: false
      changed_when: false
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Delete existing deployment if found (backend)
      command: kubectl delete deployment backend -n fullstack
      when: be_check.rc == 0
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Apply backend
      command: kubectl apply -f /home/ubuntu/Backend-Deployment.yaml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    # ===== Frontend =====
    - name: Check if deployment exists (frontend)
      command: kubectl get deployment frontend -n fullstack
      register: fe_check
      failed_when: false
      changed_when: false
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Delete existing deployment if found (frontend)
      command: kubectl delete deployment frontend -n fullstack
      when: fe_check.rc == 0
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - name: Apply frontend
      command: kubectl apply -f /home/ubuntu/Frontend-Deployment.yaml
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    # ===== Patch Frontend Service to NodePort =====
    - name: Patch frontend service to NodePort
      command: >
        kubectl patch svc frontend -p '{"spec": {"type": "NodePort"}}' -n fullstack
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    # ===== Debug =====
    - name: Get all deployments
      command: kubectl get deployments -n fullstack -o wide
      register: deployments
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - debug:
        var: deployments.stdout_lines

    - name: Get all pods
      command: kubectl get pods -n fullstack -o wide
      register: pods
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - debug:
        var: pods.stdout_lines

    - name: Get services
      command: kubectl get svc -n fullstack -o wide
      register: services
      environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

    - debug:
        var: services.stdout_lines
